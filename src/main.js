/* Палиндром можно получить как результат операций над другими числами.
Возьмём любое натуральное число и сложим его с обращённым числом, то есть записанным теми же цифрами,
но в обратном порядке. Проделаем то же действие с получившейся суммой и будем повторять его до тех пор,
пока не образуется палиндром. Иногда достаточно сделать всего один шаг (например, 312 + 213 = 525),
но, как правило, требуется не менее двух. Скажем, число 96 порождает палиндром 4884 только на четвёртом шаге....

В результате я хочу, чтоб вы написали функцию, которая будет возвращать объект где будет свойство result -
и это будет палиндром и свойство step - это число вызовов до нахождения палиндрома */

const reverse = (number) => Number(String(number).split('').reverse().join(''));

const palindrome = (number, step = 0) => {
    const reverseNumber = reverse(number);
    return (number === reverseNumber) ? { result: number, step } : palindrome(number += reverseNumber, ++step) 
}


// TEST:

console.log(palindrome(11)); //0
console.log(palindrome(96)); //4

